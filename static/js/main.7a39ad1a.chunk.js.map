{"version":3,"sources":["api/coinGeckoApi.js","hooks/useCoins.js","components/CoinsTable.jsx","components/CoinInfo.jsx","components/InfoBar.jsx","hooks/useGlobalInfo.js","components/NavBar.jsx","context/TransactionsContext.js","utils/localstorage.js","components/TransactionsTable.jsx","components/Transactions.jsx","components/PortfolioValueCell.jsx","components/PortfolioTable.jsx","components/Portfolio.jsx","hooks/usePrices.js","utils/mapTransactions.js","App.js","reportWebVitals.js","index.js"],"names":["cache","setupCache","maxAge","coinGeckoApi","axios","create","baseURL","timeout","adapter","coinGeckoApiGlobal","useCoins","useState","coins","setCoins","loading","setLoading","fetchCoinGecko","useCallback","a","id","page","rowsPerPage","URL","Promise","all","get","res","data","console","error","CoinsTable","setPage","setRowsPerPage","useEffect","Title","styled","TableCell","fontSize","fontWeight","Box","CircularProgress","Typography","variant","align","style","margin","TableContainer","component","Paper","Table","sx","minWidth","TableHead","TableRow","TableBody","map","el","border","scope","textTransform","to","textDecoration","color","display","alignItems","src","image","alt","width","paddingRight","name","symbol","toFixed","Button","TableFooter","TablePagination","rowsPerPageOptions","label","value","colSpan","count","onPageChange","event","newPage","onRowsPerPageChange","parseInt","target","CoinInfo","coin","URLSearchParams","window","location","search","crypto","progress","Breadcrumbs","Card","padding","CardContent","Grid","container","spacing","item","xs","gutterBottom","flexGrow","LinearProgress","justifyContent","ath","Text","InfoBar","global","setGlobal","fetchGlobalInfo","useGlobalInfo","Container","paddingTop","paddingBottom","usd","paddingLeft","btc","eth","NavBar","AppBar","position","maxWidth","Toolbar","marginRight","marginLeft","TransactionsContext","createContext","transactions","valuePortfolio","LS_TRANSACTIONS","saveToLs","localStorage","setItem","JSON","stringify","loadFromLs","parse","getItem","e","TransactionsTable","props","context","useContext","type","price","amount","date","size","onClick","newArr","transaction","push","setTransactions","removeTransaction","Transactions","useSearchParams","searchIdParam","valueAmount","setValueAmount","valuePrice","setValuePrice","valueName","setValueName","transactionType","setTransactionType","getActualTime","Date","getDate","toString","getMonth","getFullYear","getHours","getMinutes","getSeconds","list","flexDirection","RadioGroup","defaultValue","onChange","FormControlLabel","control","Radio","Autocomplete","disablePortal","options","onInputChange","newInputValue","renderInput","params","TextField","multiline","maxRows","newTransactions","concat","uuidv4","parseFloat","PortfolioValueCell","PortfolioTable","table","ob","newArray","Object","entries","mapTransactions","key","makeTable","Portfolio","prices","setPrices","fetchPrices","ids","usePrices","newData","i","length","mapTransactionsToPortfolio","idsToFetch","keys","sort","join","log","getOwnPropertyNames","App","setContext","contextValue","setValuePortfolio","className","height","Provider","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7a39ad1a.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport { setupCache } from 'axios-cache-adapter';\r\n\r\nconst cache = setupCache({\r\n  maxAge: 30 * 1000,\r\n});\r\n\r\nexport const coinGeckoApi = axios.create({\r\n  baseURL: 'https://api.coingecko.com/api/v3/',\r\n  timeout: 2000,\r\n  adapter: cache.adapter,\r\n  //   headers: { 'X-Custom-Header': 'foobar', accept: 'application/json' },\r\n});\r\n\r\nexport const coinGeckoApiGlobal = axios.create({\r\n  baseURL: 'https://api.coingecko.com/api/v3/global',\r\n  timeout: 2000,\r\n  //   headers: { 'X-Custom-Header': 'foobar', accept: 'application/json' },\r\n});\r\n","import { useState, useCallback } from 'react';\r\nimport { coinGeckoApi } from '../api';\r\n\r\nexport const useCoins = () => {\r\n  const [coins, setCoins] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const fetchCoinGecko = useCallback(\r\n    async ({ id = null, page = 0, rowsPerPage = 50 }) => {\r\n      setLoading(true);\r\n      let URL = `coins/markets?vs_currency=usd&order=market_cap_desc&per_page=${rowsPerPage}&page=${\r\n        page + 1\r\n      }&sparkline=false`;\r\n      if (id) {\r\n        URL += '&ids=' + id;\r\n      }\r\n      try {\r\n        const [res] = await Promise.all([coinGeckoApi.get(URL, {})]);\r\n        setCoins(res.data);\r\n      } catch (e) {\r\n        console.error('Error while fetching current weather', e);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    },\r\n    [],\r\n  );\r\n\r\n  return {\r\n    coins,\r\n    loading,\r\n    fetchCoinGecko,\r\n  };\r\n};\r\n","import { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport Table from '@mui/material/Table';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport Paper from '@mui/material/Paper';\r\nimport TablePagination from '@mui/material/TablePagination';\r\nimport TableFooter from '@mui/material/TableFooter';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Button from '@mui/material/Button';\r\nimport { styled } from '@mui/styles';\r\n\r\nimport { useCoins } from '../hooks/useCoins';\r\n\r\nexport const CoinsTable = () => {\r\n  // pageId ma byc czytane z url (useLocation)\r\n  // const pageId = 2;\r\n  const [page, setPage] = useState(0);\r\n  const { coins, loading, fetchCoinGecko } = useCoins();\r\n  const [rowsPerPage, setRowsPerPage] = useState(50);\r\n\r\n  useEffect(() => {\r\n    fetchCoinGecko({ page, rowsPerPage });\r\n  }, [fetchCoinGecko, page, rowsPerPage]);\r\n\r\n  const onPageChange = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const Title = styled(TableCell)({\r\n    fontSize: 15,\r\n    fontWeight: 'bold',\r\n  });\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box>\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box>\r\n      <Typography\r\n        variant=\"h4\"\r\n        align=\"left\"\r\n        style={{ margin: '20px 0 40px 0' }}\r\n      >\r\n        Cryptocurrency Prices by Market Cap\r\n      </Typography>\r\n\r\n      <TableContainer component={Paper}>\r\n        <Table\r\n          sx={{ minWidth: 650 }}\r\n          aria-label=\"simple pagination table\"\r\n        >\r\n          <TableHead>\r\n            <TableRow>\r\n              <Title>#</Title>\r\n              <Title align=\"left\">Coin</Title>\r\n              <Title align=\"left\"></Title>\r\n              <Title align=\"right\">Price</Title>\r\n              <Title align=\"right\">24H</Title>\r\n              <Title align=\"right\">Mkt Cap</Title>\r\n              <Title align=\"right\"></Title>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {coins.map((el) => (\r\n              <TableRow\r\n                key={el.id}\r\n                sx={{\r\n                  '&:last-child td, &:last-child th': { border: 0 },\r\n                }}\r\n              >\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  {el['market_cap_rank']}\r\n                </TableCell>\r\n\r\n                <TableCell\r\n                  align=\"left\"\r\n                  style={{\r\n                    textTransform: 'uppercase',\r\n                    fontWeight: 'bold',\r\n                  }}\r\n                >\r\n                  <Link\r\n                    to={`coin/?id=${el.id}`}\r\n                    style={{\r\n                      textDecoration: 'none',\r\n                      color: '#000000',\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                    }}\r\n                  >\r\n                    <img\r\n                      src={el.image}\r\n                      alt=\"\"\r\n                      style={{ width: 20, paddingRight: 10 }}\r\n                    />\r\n                    {el.name}\r\n                  </Link>\r\n                </TableCell>\r\n\r\n                <TableCell\r\n                  align=\"left\"\r\n                  style={{ textTransform: 'uppercase' }}\r\n                >\r\n                  {el.symbol}\r\n                </TableCell>\r\n                <TableCell align=\"right\">\r\n                  $ {el['current_price']}\r\n                </TableCell>\r\n                <TableCell align=\"right\">\r\n                  {el['price_change_percentage_24h'].toFixed(1)}%\r\n                </TableCell>\r\n                <TableCell align=\"right\">\r\n                  $ {el['market_cap']}\r\n                </TableCell>\r\n                <TableCell align=\"right\">\r\n                  <Link\r\n                    to={`transactions/?id=${el.id}`}\r\n                    style={{\r\n                      textDecoration: 'none',\r\n                      color: '#000000',\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                    }}\r\n                  >\r\n                    <Button variant=\"contained\">Add</Button>\r\n                  </Link>\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n          <TableFooter>\r\n            <TablePagination\r\n              rowsPerPageOptions={[\r\n                5,\r\n                10,\r\n                25,\r\n                50,\r\n                { label: 'All', value: -1 },\r\n              ]}\r\n              colSpan={4}\r\n              count={10000}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              onPageChange={onPageChange}\r\n              onRowsPerPageChange={handleChangeRowsPerPage}\r\n            />\r\n          </TableFooter>\r\n        </Table>\r\n      </TableContainer>\r\n    </Box>\r\n  );\r\n};\r\n","import { useEffect } from 'react';\r\n\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Typography from '@mui/material/Typography';\r\nimport Grid from '@mui/material/Grid';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Table from '@mui/material/Table';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Breadcrumbs from '@mui/material/Breadcrumbs';\r\nimport Box from '@mui/material/Box';\r\n\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport { useCoins } from '../hooks/useCoins';\r\n\r\nexport const CoinInfo = () => {\r\n  const queryParams = new URLSearchParams(window.location.search);\r\n  const coin = queryParams.get('id');\r\n\r\n  const { coins, loading, fetchCoinGecko } = useCoins();\r\n  const crypto = coins[0];\r\n\r\n  useEffect(() => {\r\n    fetchCoinGecko({ id: coin });\r\n  }, [fetchCoinGecko, coin]);\r\n\r\n  if (loading) {\r\n    return <CircularProgress />;\r\n  }\r\n\r\n  if (!crypto) {\r\n    return <span>Error while loading crypto</span>;\r\n  }\r\n\r\n  const progress =\r\n    ((crypto['current_price'] - crypto['low_24h']) /\r\n      (crypto['high_24h'] - crypto['low_24h'])) *\r\n    100;\r\n\r\n  return (\r\n    <div>\r\n      <Breadcrumbs>\r\n        <Link to=\"/\" color=\"inherit\">\r\n          Home\r\n        </Link>\r\n        <Typography color=\"text.primary\">{coin}</Typography>\r\n      </Breadcrumbs>\r\n      <Card\r\n        variant=\"outlined\"\r\n        sx={{ minWidth: 275 }}\r\n        style={{ margin: 40, padding: 40 }}\r\n      >\r\n        <CardContent>\r\n          <Grid container spacing={8}>\r\n            <Grid item xs={12}>\r\n              <img src={crypto.image} alt=\"\" style={{ width: 70 }} />\r\n              <Typography variant=\"h2\" gutterBottom>\r\n                {crypto.name}\r\n              </Typography>\r\n              <Typography variant=\"h4\">\r\n                $ {crypto['current_price']}\r\n              </Typography>\r\n              <Box style={{ flexGrow: 1, padding: '20px 0 10px 0' }}>\r\n                <LinearProgress\r\n                  variant=\"determinate\"\r\n                  value={progress}\r\n                />\r\n              </Box>\r\n              <Box\r\n                style={{\r\n                  display: 'flex',\r\n                  justifyContent: 'space-between',\r\n                }}\r\n              >\r\n                <Typography>$ {crypto['low_24h']}</Typography>\r\n                <Typography>24H RANGE</Typography>\r\n                <Typography>$ {crypto['high_24h']}</Typography>\r\n              </Box>\r\n            </Grid>\r\n            <Grid item xs={7}>\r\n              <Table aria-label=\"simple\">\r\n                <TableBody>\r\n                  <TableRow>\r\n                    <TableCell>Market Cap</TableCell>\r\n                    <TableCell align={'right'}>\r\n                      $ {crypto['market_cap']}\r\n                    </TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <TableCell>Fully Diluted Valuation</TableCell>\r\n                    <TableCell align={'right'}>\r\n                      $ {crypto['fully_diluted_valuation']}\r\n                    </TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <TableCell>Total Vol</TableCell>\r\n                    <TableCell align={'right'}>\r\n                      $ {crypto['total_volume']}\r\n                    </TableCell>\r\n                  </TableRow>\r\n                </TableBody>\r\n              </Table>\r\n            </Grid>\r\n            <Grid item xs={5}>\r\n              <Table aria-label=\"simple\">\r\n                <TableBody>\r\n                  <TableRow>\r\n                    <TableCell>Total Supply</TableCell>\r\n                    <TableCell align={'right'}>\r\n                      {crypto['total_supply']}\r\n                    </TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <TableCell>Max Supply</TableCell>\r\n                    <TableCell align={'right'}>\r\n                      {crypto['max_supply']}\r\n                    </TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <TableCell>ATH</TableCell>\r\n                    <TableCell align={'right'}>\r\n                      $ {crypto.ath}\r\n                    </TableCell>\r\n                  </TableRow>\r\n                </TableBody>\r\n              </Table>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n","import Container from '@mui/material/Container';\r\nimport Paper from '@mui/material/Paper';\r\nimport Typography from '@mui/material/Typography';\r\nimport { useGlobalInfo } from '../hooks/useGlobalInfo';\r\nimport { useEffect } from 'react';\r\nimport { styled } from '@mui/styles';\r\n\r\nconst Title = styled(Typography)({\r\n  fontSize: 14,\r\n  fontWeight: 'bold',\r\n  paddingRight: 5,\r\n});\r\n\r\nconst Text = styled(Typography)({\r\n  fontSize: 14,\r\n  paddingRight: 25,\r\n  color: '#00b4d8',\r\n});\r\n\r\nexport const InfoBar = () => {\r\n  const { global, loading, fetchGlobalInfo } = useGlobalInfo();\r\n  useEffect(() => {\r\n    fetchGlobalInfo({});\r\n  }, [fetchGlobalInfo]);\r\n\r\n  if (loading) {\r\n    return <Paper> wronk</Paper>;\r\n  }\r\n  return (\r\n    <Paper>\r\n      <Container\r\n        style={{\r\n          display: 'flex',\r\n          justifyContent: 'left',\r\n          paddingTop: '10px',\r\n          paddingBottom: '10px',\r\n        }}\r\n      >\r\n        <Title>Coins: </Title>\r\n        <Text>{global['active_cryptocurrencies']}</Text>\r\n        <Title>Market Cap:</Title>\r\n        <Text>\r\n          ${global['total_market_cap'].usd.toFixed(0)}\r\n          <Typography\r\n            variant=\"subtitle\"\r\n            style={{ paddingLeft: 2, color: '#8d99ae' }}\r\n          >\r\n            {global['market_cap_change_percentage_24h_usd'].toFixed(\r\n              1,\r\n            )}\r\n            %\r\n          </Typography>\r\n        </Text>\r\n\r\n        <Title>24h Vol:</Title>\r\n        <Text>${global['total_volume'].usd.toFixed(0)}</Text>\r\n        <Title>Dominance:</Title>\r\n        <Text>\r\n          BTC {global['market_cap_percentage'].btc.toFixed(1)}%\r\n        </Text>\r\n        <Text>\r\n          ETH {global['market_cap_percentage'].eth.toFixed(1)}%\r\n        </Text>\r\n      </Container>\r\n    </Paper>\r\n  );\r\n};\r\n","import { useState, useCallback } from 'react';\r\nimport { coinGeckoApiGlobal } from '../api';\r\n\r\nexport const useGlobalInfo = () => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [global, setGlobal] = useState([]);\r\n\r\n  const fetchGlobalInfo = useCallback(async () => {\r\n    setLoading(true);\r\n\r\n    try {\r\n      const [res] = await Promise.all([\r\n        coinGeckoApiGlobal.get('', {}),\r\n      ]);\r\n      setGlobal(res.data.data);\r\n    } catch (e) {\r\n      console.error('Error while fetching current weather', e);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  return {\r\n    global,\r\n    loading,\r\n    fetchGlobalInfo,\r\n  };\r\n};\r\n","import Toolbar from '@mui/material/Toolbar';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Container from '@mui/material/Container';\r\nimport Button from '@mui/material/Button';\r\nimport Typography from '@mui/material/Typography';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const NavBar = () => {\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Container maxWidth=\"xl\">\r\n        <Toolbar>\r\n          <img\r\n            src=\"https://assets.coingecko.com/coins/images/825/large/binance-coin-logo.png?1547034615\"\r\n            alt=\"\"\r\n            style={{ width: 40, marginRight: 10 }}\r\n          />\r\n          <Typography variant=\"h4\">CryptoInfo</Typography>\r\n          <Link\r\n            to=\"/\"\r\n            style={{\r\n              textDecoration: 'none',\r\n              color: '#fff',\r\n              fontWeight: 'bold',\r\n            }}\r\n          >\r\n            <Button\r\n              color=\"inherit\"\r\n              style={{\r\n                marginLeft: 100,\r\n                fontSize: 18,\r\n              }}\r\n            >\r\n              Coins\r\n            </Button>\r\n          </Link>\r\n          <Link\r\n            to=\"/transactions\"\r\n            style={{\r\n              textDecoration: 'none',\r\n              color: '#fff',\r\n              fontWeight: 'bold',\r\n            }}\r\n          >\r\n            <Button\r\n              color=\"inherit\"\r\n              style={{\r\n                fontSize: 18,\r\n              }}\r\n            >\r\n              Transactions\r\n            </Button>\r\n          </Link>\r\n          <Link\r\n            to=\"/portfolio\"\r\n            style={{\r\n              textDecoration: 'none',\r\n              color: '#fff',\r\n              fontWeight: 'bold',\r\n            }}\r\n          >\r\n            <Button\r\n              color=\"inherit\"\r\n              style={{\r\n                fontSize: 18,\r\n              }}\r\n            >\r\n              Portfolio\r\n            </Button>\r\n          </Link>\r\n        </Toolbar>\r\n      </Container>\r\n    </AppBar>\r\n  );\r\n};\r\n","import { createContext } from 'react';\r\n\r\nexport const TransactionsContext = createContext({\r\n  transactions: [],\r\n  valuePortfolio: 0,\r\n});\r\n","const LS_TRANSACTIONS = 'ls_transactions';\r\n\r\nexport const saveToLs = (data) => {\r\n  localStorage.setItem(LS_TRANSACTIONS, JSON.stringify(data));\r\n};\r\n\r\nexport const loadFromLs = () => {\r\n  try {\r\n    return JSON.parse(localStorage.getItem(LS_TRANSACTIONS)) || [];\r\n  } catch (e) {\r\n    console.error(\r\n      'Failed to load local storage for key: ' + LS_TRANSACTIONS,\r\n    );\r\n    saveToLs([]);\r\n    return [];\r\n  }\r\n};\r\n","import Box from '@mui/material/Box';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport Paper from '@mui/material/Paper';\r\nimport Table from '@mui/material/Table';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\n\r\nimport Button from '@mui/material/Button';\r\n\r\nimport { useContext } from 'react';\r\nimport { TransactionsContext } from '../context/TransactionsContext';\r\n\r\nimport { styled } from '@mui/styles';\r\nimport { saveToLs } from '../utils/localstorage';\r\n\r\nexport const TransactionsTable = (props) => {\r\n  const context = useContext(TransactionsContext);\r\n\r\n  const Title = styled(TableCell)({\r\n    fontSize: 15,\r\n    fontWeight: 'bold',\r\n  });\r\n\r\n  if (!crypto) {\r\n    return <span>Error while loading crypto</span>;\r\n  }\r\n\r\n  const removeTransaction = (id) => {\r\n    let newArr = [];\r\n    for (let transaction of context.transactions) {\r\n      if (transaction.id !== id) {\r\n        newArr.push(transaction);\r\n      }\r\n    }\r\n    saveToLs(newArr);\r\n    context.setTransactions(newArr);\r\n  };\r\n\r\n  return (\r\n    <Box style={{ margin: '40px 0 50px' }}>\r\n      <TableContainer component={Paper}>\r\n        <Table\r\n          sx={{ minWidth: 650 }}\r\n          aria-label=\"simple pagination table\"\r\n        >\r\n          <TableHead>\r\n            <TableRow>\r\n              <Title>#</Title>\r\n              <Title align=\"left\">Coin</Title>\r\n              <Title align=\"right\">Purchase price</Title>\r\n              <Title align=\"right\">Amount</Title>\r\n              <Title align=\"right\">Value</Title>\r\n              <Title align=\"right\">Date</Title>\r\n              <Title align=\"right\"></Title>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {context.transactions.map((el) => (\r\n              <TableRow\r\n                key={el.id}\r\n                sx={{\r\n                  '&:last-child td, &:last-child th': { border: 0 },\r\n                }}\r\n              >\r\n                {el.type === 'buy' ? (\r\n                  <TableCell\r\n                    component=\"th\"\r\n                    scope=\"row\"\r\n                    style={{\r\n                      color: '#07BF29',\r\n                      fontWeight: 'bold',\r\n                      textTransform: 'uppercase',\r\n                    }}\r\n                  >\r\n                    {el.type}\r\n                  </TableCell>\r\n                ) : (\r\n                  <TableCell\r\n                    component=\"th\"\r\n                    scope=\"row\"\r\n                    style={{\r\n                      color: '#D71212',\r\n                      fontWeight: 'bold',\r\n                      textTransform: 'uppercase',\r\n                    }}\r\n                  >\r\n                    {el.type}\r\n                  </TableCell>\r\n                )}\r\n                <TableCell\r\n                  align=\"left\"\r\n                  style={{\r\n                    textTransform: 'uppercase',\r\n                    fontWeight: 'bold',\r\n                  }}\r\n                >\r\n                  {el.name}\r\n                </TableCell>\r\n                <TableCell\r\n                  align=\"right\"\r\n                  style={{ textTransform: 'uppercase' }}\r\n                >\r\n                  $ {el.price}\r\n                </TableCell>\r\n                <TableCell align=\"right\">{el.amount}</TableCell>\r\n                <TableCell align=\"right\">\r\n                  $ {el.amount * el.price}\r\n                </TableCell>\r\n                <TableCell align=\"right\">{el.date}</TableCell>\r\n                <TableCell align=\"right\">\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"error\"\r\n                    size=\"small\"\r\n                    onClick={() => removeTransaction(el.id)}\r\n                  >\r\n                    x\r\n                  </Button>\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </Box>\r\n  );\r\n};\r\n","import Typography from '@mui/material/Typography';\r\nimport Box from '@mui/material/Box';\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Grid from '@mui/material/Grid';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport RadioGroup from '@mui/material/RadioGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Radio from '@mui/material/Radio';\r\n\r\nimport { TransactionsTable } from './TransactionsTable';\r\nimport { useEffect, useState, useContext } from 'react';\r\nimport { useCoins } from '../hooks/useCoins';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport { TransactionsContext } from '../context/TransactionsContext';\r\nimport { saveToLs } from '../utils/localstorage';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport const Transactions = () => {\r\n  const [params] = useSearchParams();\r\n  const searchIdParam = params.get('id');\r\n  const [valueAmount, setValueAmount] = useState(null);\r\n  const [valuePrice, setValuePrice] = useState(null);\r\n  const [valueName, setValueName] = useState(searchIdParam || null);\r\n  const [transactionType, setTransactionType] = useState('buy');\r\n\r\n  const { coins, loading, fetchCoinGecko } = useCoins();\r\n  const crypto = coins[0];\r\n\r\n  const context = useContext(TransactionsContext);\r\n\r\n  const handleChangeAmount = (event) => {\r\n    setValueAmount(event.target.value);\r\n  };\r\n\r\n  const handleChangePrice = (event) => {\r\n    setValuePrice(event.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchCoinGecko({});\r\n  }, [fetchCoinGecko]);\r\n\r\n  if (loading) {\r\n    return <CircularProgress />;\r\n  }\r\n\r\n  if (!crypto) {\r\n    return <span>Error while loading crypto</span>;\r\n  }\r\n\r\n  const getActualTime = () => {\r\n    let date = new Date();\r\n    let actualDate = `${date.getDate().toString()}-${\r\n      date.getMonth() + (1).toString()\r\n    }-${date.getFullYear().toString()}   ${date\r\n      .getHours()\r\n      .toString()}:${date.getMinutes().toString()}:${date\r\n      .getSeconds()\r\n      .toString()}`;\r\n\r\n    return actualDate;\r\n  };\r\n\r\n  const handleChangeCoinsList = () => {\r\n    const newTransactions = context.transactions.concat({\r\n      id: uuidv4(),\r\n      type: transactionType,\r\n      name: valueName,\r\n      amount: parseFloat(valueAmount),\r\n      price: parseFloat(valuePrice),\r\n      date: getActualTime(),\r\n    });\r\n    saveToLs(newTransactions);\r\n    context.setTransactions(newTransactions);\r\n\r\n    setValueAmount(0);\r\n    setValuePrice(0);\r\n  };\r\n\r\n  const handleRadioChange = (event) => {\r\n    setTransactionType(event.target.value);\r\n  };\r\n\r\n  const list = coins.map((coin) => coin.id);\r\n  return (\r\n    <Box>\r\n      <Grid container spacing={8}>\r\n        <Grid item xs={12}>\r\n          <Card\r\n            variant=\"outlined\"\r\n            sx={{ minWidth: 275 }}\r\n            style={{\r\n              padding: 20,\r\n            }}\r\n          >\r\n            <CardContent\r\n              style={{\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                alignItems: 'center',\r\n              }}\r\n            >\r\n              <Typography variant=\"h4\" gutterBottom>\r\n                Transactions\r\n              </Typography>\r\n              <Typography variant=\"p\" gutterBottom>\r\n                Add your transaction\r\n              </Typography>\r\n              <Box\r\n                style={{\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  justifyContent: 'space-around',\r\n                  width: '80%',\r\n                  padding: 40,\r\n                }}\r\n              >\r\n                <RadioGroup\r\n                  aria-label=\"transaction\"\r\n                  defaultValue=\"buy\"\r\n                  value={transactionType}\r\n                  name=\"radio-buttons-group\"\r\n                  onChange={handleRadioChange}\r\n                >\r\n                  <FormControlLabel\r\n                    value=\"buy\"\r\n                    control={<Radio />}\r\n                    label=\"Buy\"\r\n                  />\r\n                  <FormControlLabel\r\n                    value=\"sell\"\r\n                    control={<Radio />}\r\n                    label=\"Sell\"\r\n                  />\r\n                </RadioGroup>\r\n                <Autocomplete\r\n                  disablePortal\r\n                  id=\"combo-box-demo\"\r\n                  options={list}\r\n                  onInputChange={(event, newInputValue) => {\r\n                    setValueName(newInputValue);\r\n                  }}\r\n                  sx={{ width: 300 }}\r\n                  renderInput={(params) => (\r\n                    <TextField {...params} label=\"Coin\" />\r\n                  )}\r\n                  value={valueName || 'bitcoin'}\r\n                />\r\n                <TextField\r\n                  id=\"outlined-multiline-flexible\"\r\n                  label=\"Purchase price\"\r\n                  multiline\r\n                  maxRows={4}\r\n                  value={valuePrice}\r\n                  onChange={handleChangePrice}\r\n                />\r\n                <TextField\r\n                  id=\"outlined-multiline-flexible\"\r\n                  label=\"Amount\"\r\n                  multiline\r\n                  maxRows={4}\r\n                  value={valueAmount}\r\n                  onChange={handleChangeAmount}\r\n                />\r\n              </Box>\r\n\r\n              <Button\r\n                variant=\"contained\"\r\n                onClick={handleChangeCoinsList}\r\n              >\r\n                Add transaction\r\n              </Button>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <TransactionsTable />\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n","import { useEffect } from 'react';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport { useCoins } from '../hooks/useCoins';\r\n\r\nexport const PortfolioValueCell = ({ name, amount }) => {\r\n  // call do api, ktory pobierze aktualny kurs dla tej kryptowaluty\r\n  const { coins, loading, fetchCoinGecko } = useCoins();\r\n\r\n  useEffect(() => {\r\n    fetchCoinGecko({ id: name });\r\n  }, [fetchCoinGecko, name]);\r\n\r\n  if (loading) {\r\n    return <TableCell />;\r\n  }\r\n\r\n  return (\r\n    <TableCell align=\"right\">\r\n      {amount\r\n        ? `$ ${(coins[0]['current_price'] * amount).toFixed(2)}`\r\n        : `$ ${coins[0]['current_price']}`}\r\n    </TableCell>\r\n  );\r\n};\r\n","import TableContainer from '@mui/material/TableContainer';\r\nimport Table from '@mui/material/Table';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport Box from '@mui/material/Box';\r\nimport Paper from '@mui/material/Paper';\r\nimport { styled } from '@mui/styles';\r\n// import { useContext } from 'react';\r\n// import { TransactionsContext } from '../context/TransactionsContext';\r\nimport { PortfolioValueCell } from './PortfolioValueCell';\r\n\r\nconst Title = styled(TableCell)({\r\n  fontSize: 15,\r\n  fontWeight: 'bold',\r\n});\r\n\r\nexport const PortfolioTable = (props) => {\r\n  // const context = useContext(TransactionsContext);\r\n  // console.log(props.valuePortfolio);\r\n  const makeTable = (ob) => {\r\n    let newArray = [];\r\n    for (const [key, value] of Object.entries(\r\n      props.mapTransactions,\r\n    )) {\r\n      //   newArray.push({ name: key, amount: value });\r\n      newArray.push(\r\n        <TableRow\r\n          sx={{\r\n            '&:last-child td, &:last-child th': { border: 0 },\r\n          }}\r\n        >\r\n          <TableCell></TableCell>\r\n          <TableCell\r\n            align=\"left\"\r\n            style={{\r\n              textTransform: 'uppercase',\r\n              fontWeight: 'bold',\r\n            }}\r\n          >\r\n            {key}\r\n          </TableCell>\r\n\r\n          <TableCell\r\n            align=\"right\"\r\n            style={{ textTransform: 'uppercase' }}\r\n          >\r\n            {value}\r\n          </TableCell>\r\n          <PortfolioValueCell name={key} />\r\n          <PortfolioValueCell name={key} amount={value} />\r\n        </TableRow>,\r\n      );\r\n    }\r\n    return newArray;\r\n  };\r\n\r\n  let table = makeTable(props.mapTransactions);\r\n\r\n  return (\r\n    <Box>\r\n      <TableContainer component={Paper}>\r\n        <Table\r\n          sx={{ minWidth: 650 }}\r\n          aria-label=\"simple pagination table\"\r\n        >\r\n          <TableHead>\r\n            <TableRow>\r\n              <Title>#</Title>\r\n              <Title align=\"left\">Coin</Title>\r\n              <Title align=\"right\">Amount</Title>\r\n              <Title align=\"right\">Price</Title>\r\n              <Title align=\"right\">Value</Title>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>{table}</TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </Box>\r\n  );\r\n};\r\n","import Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport Grid from '@mui/material/Grid';\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport { TransactionsContext } from '../context/TransactionsContext';\r\nimport { useContext, useState } from 'react';\r\nimport { PortfolioTable } from './PortfolioTable';\r\nimport { mapTransactionsToPortfolio } from '../utils/mapTransactions';\r\nimport { usePrices } from '../hooks/usePrices';\r\nimport { useEffect } from 'react';\r\n\r\nexport const Portfolio = () => {\r\n  const [valueOfPortfolio, setValueOfPortfolio] = useState(0);\r\n  const { prices, loading, fetchPrices } = usePrices();\r\n  const context = useContext(TransactionsContext);\r\n\r\n  const mapTransactions = mapTransactionsToPortfolio(\r\n    context.transactions,\r\n  );\r\n\r\n  const idsToFetch = Object.keys(mapTransactions).sort().join(',');\r\n\r\n  useEffect(() => {\r\n    fetchPrices({ ids: idsToFetch });\r\n  }, [idsToFetch, fetchPrices]);\r\n\r\n  console.log('transactions', prices);\r\n\r\n  if (loading) {\r\n    return <div>Loading</div>;\r\n  }\r\n\r\n  // tabela\r\n  return (\r\n    <Box>\r\n      <Grid\r\n        container\r\n        spacing={2}\r\n        style={{ padding: '20px 0 40px 0' }}\r\n      >\r\n        <Grid item xs={3}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography style={{ fontWeight: 'bold' }}>\r\n                {context.transactions.length} Trades\r\n              </Typography>\r\n              <Typography>\r\n                {`With \r\n                ${Object.getOwnPropertyNames(mapTransactions).length}\r\n                 coins`}\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography style={{ fontWeight: 'bold' }}>\r\n                Last Transation:\r\n              </Typography>\r\n              <Typography>\r\n                {\r\n                  context.transactions[\r\n                    context.transactions.length - 1\r\n                  ].date\r\n                }\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography style={{ fontWeight: 'bold' }}>\r\n                First Transation:{' '}\r\n              </Typography>\r\n              <Typography>{context.transactions[0].date}</Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography style={{ fontWeight: 'bold' }}>\r\n                Account value:\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n      <Typography variant=\"h4\">Portfolio</Typography>\r\n      <PortfolioTable mapTransactions={mapTransactions} />\r\n    </Box>\r\n  );\r\n};\r\n","import { useState, useCallback } from 'react';\r\nimport { coinGeckoApi } from '../api';\r\n\r\nexport const usePrices = () => {\r\n  const [prices, setPrices] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const fetchPrices = useCallback(async ({ ids }) => {\r\n    setLoading(true);\r\n    let URL = `simple/price?ids=${ids}&vs_currencies=usd`;\r\n    try {\r\n      const [res] = await coinGeckoApi.get(URL, {});\r\n      const { data } = res;\r\n      // musimy sie pozbyc z value {usd: 100} zeby bylo samo 100\r\n      const parsedData = data;\r\n      setPrices(parsedData);\r\n    } catch (e) {\r\n      console.error('Error while fetching current weather', e);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  return {\r\n    prices,\r\n    loading,\r\n    fetchPrices,\r\n  };\r\n};\r\n","export const mapTransactionsToPortfolio = (transactions) => {\r\n  const newData = {};\r\n\r\n  for (let i = 0; i < transactions.length; i++) {\r\n    const name = transactions[i].name;\r\n    const value =\r\n      transactions[i].type === 'buy'\r\n        ? transactions[i].amount\r\n        : -transactions[i].amount;\r\n\r\n    if (name in newData) {\r\n      newData[name] += value;\r\n    } else {\r\n      newData[name] = value;\r\n    }\r\n  }\r\n\r\n  return newData;\r\n};\r\n\r\n// mappedTransactions - {key: cryptoName, value: cryptoCount}\r\n// cryptoPrices - {key: cryptoName, value: cryptoValue}\r\nexport const getPortfolioSum = (mappedTransactions, cryptoPrices) => {\r\n  return 0;\r\n};\r\n","import './App.css';\nimport { CoinsTable } from './components/CoinsTable';\nimport { CoinInfo } from './components/CoinInfo';\nimport { InfoBar } from './components/InfoBar';\nimport { NavBar } from './components/NavBar';\nimport { Transactions } from './components/Transactions';\nimport { Portfolio } from './components/Portfolio';\nimport { Routes, Route } from 'react-router-dom';\nimport Container from '@mui/material/Container';\nimport Box from '@mui/material/Box';\nimport { TransactionsContext } from './context/TransactionsContext';\nimport { useState } from 'react';\n\nimport { loadFromLs } from './utils/localstorage';\n\nfunction App() {\n  const [context, setContext] = useState({\n    transactions: loadFromLs(),\n    valuePortfolio: 0,\n  });\n\n  const contextValue = {\n    transactions: context.transactions,\n    valuePortfolio: context.valuePortfolio,\n    setTransactions: (transactions) =>\n      setContext({ ...context, transactions }),\n    setValuePortfolio: (valuePortfolio) =>\n      setContext({ ...context, valuePortfolio }),\n  };\n\n  return (\n    <Box\n      className=\"App\"\n      style={{\n        height: '100%',\n      }}\n    >\n      <NavBar />\n      <InfoBar />\n      <Container style={{ padding: 40 }}>\n        <TransactionsContext.Provider value={contextValue}>\n          <Routes>\n            <Route path=\"/\" element={<CoinsTable />} />\n            <Route path=\"/coin\" element={<CoinInfo />} />\n            <Route path=\"/transactions\" element={<Transactions />} />\n            <Route path=\"/portfolio\" element={<Portfolio />} />\n          </Routes>\n        </TransactionsContext.Provider>\n      </Container>\n    </Box>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}